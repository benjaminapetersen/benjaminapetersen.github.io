<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Benjamin A. Petersen | UX Developer in Raleigh, NC</title>
    <description></description>
    <link>http://benjaminapetersen.me/</link>
    <atom:link href="http://benjaminapetersen.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 25 Apr 2015 19:05:53 -0400</pubDate>
    <lastBuildDate>Sat, 25 Apr 2015 19:05:53 -0400</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Algorithms 101 - Binary Search</title>
        <description>&lt;h1 id=&quot;algorithms-101---binary-search&quot;&gt;Algorithms 101 - Binary Search&lt;/h1&gt;

&lt;p&gt;&lt;img class=&quot;book img-in-text f-right&quot; src=&quot;/assets/img/book_grokking_algorithms.jpg&quot; /&gt;
As someone who has come into a career in software development through unconventional means, I find
myself intrigued by the many things I missed out on by not pursuing a CS/CE degree back in my college
days.  Currently Algorithms are at the top of my list of Curious Things I Want To Explore.  I recently began
working through the book
&lt;a href=&quot;http://www.amazon.com/Grokking-Algorithms-illustrated-programmers-curious/dp/1617292230&quot; target=&quot;_blank&quot; title=&quot;Grokking Algorithms&quot;&gt;Grokking Algorithms&lt;/a&gt;
by Aditya Bhargava in order to dive into the topic of algorithms.&lt;/p&gt;

&lt;p&gt;The first algorithm in the book is binary search.  Binary search is simply a way to find an item in a
list in as few steps as possible.  The point?  Efficiency. We want to efficiently search extremely large
data sets without needing to iterate over every single item in the list.&lt;/p&gt;

&lt;h2 id=&quot;the-catch&quot;&gt;The Catch&lt;/h2&gt;

&lt;p&gt;The catch is that the list must be sorted to be effective (1,2,3,4,5, not 5,3,4,2,1, for example).
With a sorted list, the algorithm is simple. If the list isn’t sorted, it simply will not work.&lt;/p&gt;

&lt;h2 id=&quot;so-how-does-it-work&quot;&gt;So how does it work?&lt;/h2&gt;

&lt;p&gt;Basically, a binary search is used to find the index of the searched item in the list in as few guesses
as possible.  If found, it will return the index of the item. If not, it will return -1 (this is standard).
On each search iteration, if the guess is too large, every item above it will be ignored from this point on.
If the guess is too small, every item below will be ignored.  The cycle is repeated until either the item is
found or the min/max ranges meet, indicating that it does not exist.&lt;/p&gt;

&lt;h2 id=&quot;so-whats-the-big-deal&quot;&gt;So Whats the Big Deal?&lt;/h2&gt;

&lt;p&gt;Why is binary search interesting?  Bhargava uses a simple example.  Lets say we have a list of 4 billion
numbers and we need to find one in that list.  WIthout binary search, we would have to loop the entire
list and compare every value to what we are looking for.  That would take a very, very long time. If our
number is the last item in that list, we had to make 4 billion guesses to find it!  But what if we use
binary search?  With a binary search, the maximum number of guesses will be 32. Thirty two!  Thats a lot
less than 4 billion, and a pretty amazing improvement.&lt;/p&gt;

&lt;h2 id=&quot;how-does-it-work&quot;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;The function is rather simple.  Start with a sorted list.  Check the middle item.  If the guess is right,
win.  If too high, throw away everything higher. If too low, throw away everything lower. Repeat until the
item is found or the minimum and maximum ranges meet.&lt;/p&gt;

&lt;p&gt;Lets go back to our list of 4 billion and assume we are looking for the number 32.  In 4 billion, we guess
the half way mark of 2 billion.  Is 2 billion larger than 32? Yup! So, throw away everything greater than
2 billion. We just got rid of a lot of numbers.  Now repeat.  Half way between 0 and 2 billion is 1 billion.
Still too high, throw everything above away.  The next guess will be 500 million.  Again, we throw a lot of
items away. With this algorithm we are able to quickly hone in on to a very small subset of the list to
determine if the item we want exists.&lt;/p&gt;

&lt;h2 id=&quot;is-it-practical&quot;&gt;Is it practical?&lt;/h2&gt;

&lt;p&gt;Binary search is practical, though I don’t find myself using it (directly) very often.  Most of the real
searching I’ve needed in real world app development required a predicate function for comparison or
transformation. Lists are rarely conveniently sorted, so some sort of prep work is needed.  If I’m going
to transform my list anyway, I tend towards using a hash table, which ensures a single guess lookup, but
thats for a later post.&lt;/p&gt;

&lt;h2 id=&quot;my-implementation&quot;&gt;My Implementation&lt;/h2&gt;

&lt;p&gt;My implementation is in JavaScript, the language I work in most regularly. I’m not worried about edge cases
or real world use at this point, just the basic algorithm.  In a real app I’d use a library like
&lt;a href=&quot;http://underscorejs.org/&quot; target=&quot;_blank&quot; title=&quot;Underscore.js&quot;&gt;Underscore.js&lt;/a&gt;,
&lt;a href=&quot;https://lodash.com/&quot; target=&quot;_blank&quot; title=&quot;lodash&quot;&gt;lodash&lt;/a&gt; or
&lt;a href=&quot;http://ramdajs.com/docs/&quot; target=&quot;_blank&quot; title=&quot;Ramda&quot;&gt;Ramda&lt;/a&gt;
which are optimized and provide a host of useful tools. (For example, see
&lt;a href=&quot;http://underscorejs.org/#indexOf&quot; target=&quot;_blank&quot;&gt;Underscore’s indexOf function&lt;/a&gt;, and
to see the actual implementation in Underscore.js, checkout the
&lt;a href=&quot;http://underscorejs.org/docs/underscore.html&quot; target=&quot;_blank&quot;&gt;annotated source&lt;/a&gt;, and search for the
function &lt;code&gt;createIndexFinder()&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;My simple implementation is as follows:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;binarySearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;attempts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;guess&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;guess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;guessIndex&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And an example of it’s use:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// a function to generate a list of numbers&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;makeNumberList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// a hardcoded list of states&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;states&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Alabama&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Alaska&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Arizona&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Arkansas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;California&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Colorado&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Connecticut&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Delaware&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Florida&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Georgia&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hawaii&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Idaho&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Illinois Indiana&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Iowa&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Kansas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Kentucky&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Louisiana&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Maine&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Maryland&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Massachusetts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Michigan&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Minnesota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Mississippi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Missouri&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Montana Nebraska&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Nevada&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;New Hampshire&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;New Jersey&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;New Mexico&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;New York&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;North Carolina&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;North Dakota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Ohio&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Oklahoma&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Oregon&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Pennsylvania Rhode Island&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;South Carolina&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;South Dakota&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tennessee&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Texas&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Utah&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Vermont&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Virginia&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Washington&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;West Virginia&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Wisconsin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Wyoming&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;995&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 995, the index of the number 995 in the list.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;binarySearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;states&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Michigan&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// returns 20, the index of the string &amp;#39;Michigan&amp;#39; in the list&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s about it.  This is a first pass, so I’m sure ill tinker with it and think of a better solution, but more than
likely my next post will be on another algorithm rather than an update to this one.&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Apr 2015 00:00:00 -0400</pubDate>
        <link>http://benjaminapetersen.me/algorithms-binary-search/</link>
        <guid isPermaLink="true">http://benjaminapetersen.me/algorithms-binary-search/</guid>
        
        
      </item>
    
      <item>
        <title>Layout attribs, Angular Material &amp; Polymer, Pt 1</title>
        <description>&lt;link href=&quot;/assets/bower/angular-material/angular-material.css&quot; rel=&quot;stylesheet&quot; /&gt;

&lt;style&gt;

.outline {
    outline: 1px solid #990000;
}

.p10,
[p10] {
    padding: 10px;
}
&lt;/style&gt;

&lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

&lt;p&gt;One thing I really enjoyed about
&lt;a href=&quot;https://www.polymer-project.org/0.5/&quot; target=&quot;_blank&quot; title=&quot;Polymer Web Components&quot;&gt;Polymer&lt;/a&gt;
was using attributes for layout (via
&lt;a href=&quot;https://css-tricks.com/snippets/css/a-guide-to-flexbox/&quot; target=&quot;_blank&quot; title=&quot;A Complete Guide to Flexbox&quot;&gt;flexbox&lt;/a&gt;).
The &lt;a href=&quot;https://github.com/angular/material&quot; target=&quot;_blank&quot; title=&quot;Material Design for Angular&quot;&gt;Angular Material&lt;/a&gt; library provides a very similar approach.&lt;/p&gt;

&lt;h1 id=&quot;layout-attributes&quot;&gt;Layout Attributes?&lt;/h1&gt;

&lt;p&gt;I’m obviously talking about html.  Layout attributes provide an interesting way to give the html
an extra job.  Essentially we extract layout from our CSS, using classes for theme or skin, but
letting the HTML itself describe the basic layout.  The Angular Material library has already done the
grunt work for this, I believe taking its cue from Polymer.  The two libraries are subtly different
in the layout attributes provided, but in the end they meet the same goals.&lt;/p&gt;

&lt;h2 id=&quot;but-semantic-html&quot;&gt;But… semantic HTML?!?!&lt;/h2&gt;

&lt;p&gt;I’m all for semantics html in the appropriate context.  Back in the day when I was first getting into
web development, &lt;a href=&quot;http://www.csszengarden.com/&quot; target=&quot;_blank&quot;&gt;CSS Zen Garden&lt;/a&gt; was the greatest site
out there.  It showcased a single html file with over a hundred different css files that completely
changed the look and feel of the page.  Having this kind of separation of html &amp;amp; is extremely
valuable… if the product of your website is content (text) and you need to freshen up the skin
every year or two.&lt;/p&gt;

&lt;h2 id=&quot;application-development-isnt-about-text&quot;&gt;Application Development Isn’t About Text&lt;/h2&gt;

&lt;p&gt;Application development is a whole different animal.  The product is typically a service, not content.
In this world, the html is throw away, markup that mainly serves the purpose of gluing functionality
together.  The JavaScript and CSS are the components that take the most time to develop.  Finding ways
to make the HTML meaningful, reducing JavaScript &amp;amp; CSS to maintain is a big win.&lt;/p&gt;

&lt;h2 id=&quot;a-simple-layout&quot;&gt;A Simple Layout&lt;/h2&gt;

&lt;p&gt;Simply getting a few divs to line up in a row has been historically far trickier than it should be.
It can be accomplished with floats, inline-block styles, and other tricks, but flex based layout
is finally making it simple to get html to do what we’ve always wanted it to do.  Take this example,
adding only the &lt;a href=&quot;https://github.com/angular/material/blob/master/src/core/style/layout.scss&quot; target=&quot;_blank&quot;&gt;Angular Material CSS file&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt; left block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; center block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;right block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It produces this (with some outlines added to the divs):&lt;/p&gt;

&lt;div class=&quot;p&quot;&gt;
    &lt;div layout=&quot;row&quot; class=&quot;outline&quot;&gt;
        &lt;div class=&quot;outline&quot;&gt; left block &lt;/div&gt;
        &lt;div flex=&quot;&quot; class=&quot;outline&quot;&gt; center block &lt;/div&gt;
        &lt;div class=&quot;outline&quot;&gt;right block &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Its not pretty yet, but with two simple attributes on our HTML we have the standard website layout
with a center, left and right column.  How does this work?  Well, the &lt;code&gt;layout=&quot;row&quot;&lt;/code&gt; attribute
on the outer div changes everything.  Using flexbox, the css rule &lt;code&gt;flex-direction: row;&lt;/code&gt; (vendor
prefixes ignored) is applied.  This sets up the main axis to be horizontal, causing the child divs to
line up left to right.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;flex&lt;/code&gt; attribute added to the div in the center is pretty neat.  It applies
&lt;code&gt;flex: 1&lt;/code&gt; to this div, which basically just says “fill up the extra space”.  No width set.
Its a “blocky” kind of element, will not collapse but also will not expand to take up the whole area.
It “knows” how to expand enough to swallow up all the extra pixels left over by it’s siblings (which
take up only the space needed by their content).&lt;/p&gt;

&lt;p&gt;But what about the spacing?  In the old float days, adding padding or margin to a floated div would
break the layout.  The simplest way to do this was to nest divs or p tags within the parent layout,
applying styles to these components.  With flexbox, the math is taken care of for us.  i’m going to add
a class that will add an arbitrary 10px of padding to all of the divs:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nc&quot;&gt;.p10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; left block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; center block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;p10&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;right block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which produces:&lt;/p&gt;

&lt;div class=&quot;p&quot;&gt;
    &lt;div layout=&quot;row&quot; class=&quot;p10 outline&quot;&gt;
        &lt;div class=&quot;p10 outline&quot;&gt; left block &lt;/div&gt;
        &lt;div flex=&quot;&quot; class=&quot;p10 outline&quot;&gt; center block &lt;/div&gt;
        &lt;div class=&quot;p10 outline&quot;&gt;right block &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Whoa.  No math.  No need to figure out width + padding + margin (don’t forget to add padding and
margin px twice since they are added to both sides) to ensure your floats don’t explode.  Flexbox
allows us to trust the browser to do the math.  The padding is applied to the divs, and then the
browser simply adjust everything to fit the given space.  Even the padding on the parent is taken
into account!  This is so much less brittle.&lt;/p&gt;

&lt;h2 id=&quot;adding-our-own-attributes&quot;&gt;Adding Our Own Attributes&lt;/h2&gt;

&lt;p&gt;So far, the attributes used are those provided by Angular Material. But it could be argued that the
10 pixel padding is really for layout purposes.  Therefore, we can change &lt;code&gt;.p10 { padding: 10px}&lt;/code&gt;
to &lt;code&gt;[p10] { padding: 10px}&lt;/code&gt; to make it a layout attribute as well.  The markup would look like:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;p10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;layout=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;row&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p10&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p10&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; left block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;flex&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p10&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; center block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;p10&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;right block &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the results:&lt;/p&gt;

&lt;div class=&quot;p&quot;&gt;
    &lt;div layout=&quot;row&quot; p10=&quot;&quot; class=&quot;outline&quot;&gt;
        &lt;div p10=&quot;&quot; class=&quot;outline&quot;&gt; left block &lt;/div&gt;
        &lt;div p10=&quot;&quot; flex=&quot;&quot; class=&quot;outline&quot;&gt; center block &lt;/div&gt;
        &lt;div p10=&quot;&quot; class=&quot;outline&quot;&gt;right block &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;When we drop the &lt;code&gt;class=&quot;p10&quot;&lt;/code&gt; and replace it with the &lt;code&gt;p10&lt;/code&gt; attribute,
the markup becomes much more readable, and our HTML is now clearly declaring the layout to us.
This is very simple, and very powerful.&lt;/p&gt;

&lt;p&gt;This post really only scratches the surface of flexbox and attributes.  I’m sure many will still
hate the idea of dirtying up HTML by marrying it to the layout, but in my app development experience,
it is much more satisfying to tweak a few layout attirbutes to make subtle changes to components than
it is to fuss with the cascade of CSS.  CSS has its place, certainly, but I like the approach because
it leaves the framing in the html and lets the CSS control the paint job.&lt;/p&gt;

&lt;p&gt;This is a rather trivial example, but I’m going to try to keep my posts short to ensure I regularly
post.  Stay tuned for a part 2 in the future where I’ll attempt to something sufficiently complex
to make this convincing.&lt;/p&gt;

</description>
        <pubDate>Tue, 24 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://benjaminapetersen.me/layout-attribs/</link>
        <guid isPermaLink="true">http://benjaminapetersen.me/layout-attribs/</guid>
        
        
      </item>
    
      <item>
        <title>Hello World, A Good Place To Start</title>
        <description>&lt;h3 id=&quot;tldr&quot;&gt;tl;dr&lt;/h3&gt;

&lt;p&gt;Time to get my website back online using a static site generator called Jekyll
&amp;amp; a summary of my career history.&lt;/p&gt;

&lt;h1 id=&quot;intro-stuff-a-good-place-to-start&quot;&gt;Intro Stuff, A Good Place To Start&lt;/h1&gt;

&lt;p&gt;Its a sad thing to pull up your own domain and see a blank white screen.  I’ve
been offline for about two years now (give or take).  This is due largely
to a significant career shift.  I am currently working as a UX Developer,
which means I spend most of my day writing JavaScript.  I’ve been very focused
on JS for roughly the past 4 years and two jobs.  Prior, I was working as
a 50/50 SEO &amp;amp; PHP dev in a small web shop.  Prior to that, I was working as a
project manager and front end developer, which mean lots of talking to clients,
HTML &amp;amp; CSS.  Prior to that, a designer weilding Photoshop as my main weapon figuring
out how to turn a PSD into HTML &amp;amp; CSS.&lt;/p&gt;

&lt;p&gt;I was in a very small web shop in those early days.  We swapped hats often.  While
frustrating at times, I think it provided a good foundation in all kinds of
disciplines.  I taught myself a good bit of SEO when it landed on the scene.  More
I saw all the cool things my programmer coworkers could do, and my envy grew.  One
of them attempted to teach my Ruby on Rails.&lt;/p&gt;

&lt;p&gt;Diving into a true programming language and a sophisticated framework like Rails
brought back memories of my first experiences with a programming language.  In
high school I took a Visual Basic class and hated it. I decided programming was
one of the most miserable things in the universe a human could possibly decide to
do.  It was tedious, boring, complicated, mathematical, ugly… about as enjoyable
as enjoyable as banging your face against your desk.  WHY ON EARTH WOULD
ANYONE CHOOSE THIS HORROR STORY!?!?!?&lt;/p&gt;

&lt;p&gt;And now I really enjoy writing code.&lt;/p&gt;

&lt;p&gt;The short story of the transformation is that I view programming as an adult version
of playing with Legos.  And I really enjoyed (still do) playing with Legos.  However,
now my box of legos can actually perform real work, real tasks for people, really
make their lives more interesting.  Programming is fun (usually) and challenging
(often) and rewarding (occasionally).&lt;/p&gt;

&lt;h2 id=&quot;defeating-imposter-syndrome-with-blog-posts&quot;&gt;Defeating Imposter Syndrome With Blog Posts&lt;/h2&gt;

&lt;p&gt;For some reason I can never bring myself to think I’ve really accomplished anything
terribly important.  It may be bad memory (I’m sure this is a factor).  It may also
be the fact that you can always find someone who has done better.  The programming
world is riddled with people who work insane hours doing nothing but their craft.
I’m not interested in that. I like what I do, but I have other interests and
priorities as well.  Having a LinkedIn profile to document my career overview has
helped.  I’m hoping blogging will help more.  I want a more granular way to keep
track of the things I accomplish. Blogging will hopefully be the key.  Hopefully
it will be a way to look back on all the neat things I’ve worked on over the years,
creating a sense of accomplishment or satisfaction.  Perhaps it will be that.  Or
perhaps it will be a published trail of all my horrible ideas.  :)&lt;/p&gt;

&lt;h2 id=&quot;so-jekyll&quot;&gt;So… Jekyll?&lt;/h2&gt;

&lt;p&gt;Jekyll not a modern take on a novel published in the late 1800’s. For non-techies,
Jekyll is a static site generator.  What that means is that it is a tool that
generates a simple HTML page website with no fancy backend running during use.
No database. No login.  No security concerns.  This is much easier to maintain
than something like Wordpress which is basically a computer program that you have
to babysit to ensure it doesn’t blow up.  There are all kinds of fun and interesting
things you can do with a fancy blog generator like that, but there is a price to
pay.  Hackers really like to pick systems like Wordpress.  Plugins are often
created by people pressed for time ~ Quantity over quality.  Ultimately something
goes wrong, your site gets hacked and you have a mess on your hands. Or you pay
people to fuss and make sure that your site stays secure and working.  Or, you
just skip all the fancy and see if a tool like Jekyll will get the job done without
the headaches.  I intend to write a post about my experience with Jekyll soon.&lt;/p&gt;

&lt;h2 id=&quot;avoiding-overkill-keeping-it-simple-as-possible-as-long-as-possible&quot;&gt;Avoiding Overkill, Keeping It Simple As Possible As Long As Possible&lt;/h2&gt;

&lt;p&gt;I am going against the grain for my personality here.  For this blog, I am going
to try really hard to keep it as simple as possible.  No database, no commenting,
no login, no mobile support, not even a real theme.  At least not right away.  I’m
just starting with a page that links to some posts.  Once I write enough to justify
putting more time into this, I will do so.  If I get to one post and never write
again, there is no point in adding any of those other features!  This will be a
really fun experiment if I stick with it.  I’m going to attempt to document changes
as they come.&lt;/p&gt;

&lt;h2 id=&quot;lance-i-beat-you&quot;&gt;Lance, I Beat You&lt;/h2&gt;

&lt;p&gt;Final portion is a shout out to a friend and coworker.  Lance and I have been
challenging each other to start a blog for… years probably.  So, formally, I
declare, Lance, I beat you.&lt;/p&gt;

&lt;p&gt;Now, we will see who gets rolling on writing meaningful content first.&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://benjaminapetersen.me/hello-world/</link>
        <guid isPermaLink="true">http://benjaminapetersen.me/hello-world/</guid>
        
        
      </item>
    
  </channel>
</rss>
